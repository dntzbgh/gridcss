@use 'fg_config' as FG_CONFIGS;
//todo
// - add wrap
// - add col offset
// - add support for justify content and align items for row
.fg-grid {
  // take all the space available inside the placed container
  width: 100%;
  height: 100%;
  // if in debug, show border to see the limits of the grid
  @if (FG_CONFIGS.$fg_debugging) {
    border: solid 1px black;
    box-sizing: border-box;
    padding: 0;
    margin: 0;
  }

  .fg-row {
    display: flex;
    flex-direction: row;
    width: 100%;
    height: 100%;
    //justify-content: space-around;
    flex-wrap: wrap;
    box-sizing: inherit;
    //flex: 0 0 (100%/FG_CONFIGS.$fg_max_grid_columns);
    @if (FG_CONFIGS.$fg_debugging) {
      border: dot-dash 1px #46de1a;
    }

    .fg-col {
      box-sizing: inherit;
      display: flex;
      flex-direction: column;
      flex: 1 1 (100%/FG_CONFIGS.$fg_max_grid_columns);
      background-color: #107d8e;
      align-items: flex-start;

      // position inside elements
      &.fg-h-center {
        align-items: center;
      }

      &.fg-h-right {
        align-items: flex-end;
      }

      &.fg-h-left {
        align-items: flex-start;
      }

      &.fg-v-top {
        justify-content: flex-start;
      }

      &.fg-v-bottom {
        justify-content: flex-end;
      }

      &.fg-v-center {
        justify-content: center;
      }


      @if (FG_CONFIGS.$fg_debugging) {
        border: dotted 1px #e70b37;
        > * {
          padding: 0;
          margin: 0;
        }
      }
      // size
      @each $size in FG_CONFIGS.$fg_col_offsets {
        //@debug $size;
        &.fg-col-size-#{$size} {
          @if ($size== 33) {
            flex: 0 0 #{($size+0.33)*1%};
          } @else {
            @if ($size==66) {
              flex: 0 0 #{($size+0.66)*1%};
            } @else {
              flex: 0 0 #{$size*1%};
            }
          }

        }
      }

    }

    @if (FG_CONFIGS.$fg_hide_excess) {
      > :not(.fg-col) {
        display: none;
      }
    }

    @include FG_CONFIGS.fg_media_break {
      flex-direction: row;
      flex: 1 1 100%;

      &.fg-col {
        // position inside elements
        &.fg-h-center {
          justify-content: center;
        }

        &.fg-h-right {
          justify-content: flex-start;
        }

        &.fg-h-left {
          justify-content: flex-end;
        }

        &.fg-v-top {
          align-items: flex-start;
        }

        &.fg-v-bottom {
          align-items: flex-end;
        }

        &.fg-v-center {
          align-items: center;
        }
      }
    }


    &:not(.fg-not-responsive) {
      //background-color: #e70b37 !important;
      @include FG_CONFIGS.fg_media_break {
        flex-direction: column !important;
        flex: 1 1 100% !important;
      }
    }

  }

  // if excess is off, remove element from dom
  @if (not FG_CONFIGS.$fg_hide_excess) {
    > :not(.fg-row) {
      display: none;
    }
  }

}
